Slash 'N Burn Design Document
Version v0.1

Last updated on Wednesday, February 2nd, 2005.


Navigation
----------------------------------------------------------------------

URLs are of the form:
  http://www.slashnburn.org/<module>/<param1>/<param2>/...

There _MUST_ be an .htaccess file in the <basedir> of the SNB
installation with the following lines:

  RewriteEngine On
  RewriteRule   !^(assets|files)/ index.php [NC,L]

Otherwise NONE of the SNB system will work. The installation script
should be able to figure this one out rather easily and write out a
.htaccess file for you if it doesn't exist already.

NB: Is there a better way of handling these rewrite rules? Maybe
during the installer phase the system adds in the <base_url> to the
rewrite rule to make sure that it doesn't have to be in the root of
the URLs?

Nav entries are either:
  a) A custom page with no children
  b) A custom page with children
  c) A module without a subnav set
  d) A module with subnavs

1. A custom page MAY NOT have a module for a child.
2. A custom page MAY have multiple children or none at all.
3. A custom page MAY NOT be the child of a module.
4. A module MUST be a toplevel nav item.
5. Nav entries are reorderable.
6. Nav children are neutered -- ie: children cannot have children of
   their own.

Using these rules, we can derive the following schema for the
navigation table:

  CREATE TABLE navigation (
    nav_id    integer not null primary key auto_increment,
    parent_id integer,
    ordernum  integer not null,
    module    varchar(255) not null references modules on update cascade on delete cascade,
    caption   varchar(255) not null,
    params    text not null,
    active    integer not null default 1
  );

The navigation bar can be generated by the following pseudocode:

  navtree = array().
  foreach nav in navigation where navigation.parent_id is null:
    navitem = array("url"     => "http://www.slashnburn.org/"+ nav.module +"/"+ nav.params,
                    "caption" => nav.caption).
    
    if nav.module is "custompages":
      foreach subnav in navigation where navigation.parent_id is nav.nav_id:
        navitem['subnav'][] = array("url"     => "http://www.slashnburn.org/"+ nav.module +"/"+ subnav.params,
                                    "caption" => subnav.caption).
      done.
    
    else:
      modulenav = get an instance of {nav.module}Nav.
      foreach subnav in modulenav.generateNav():
        navitem['subnav'][] = array("url"     => subnav.url,
                                    "caption" => subnav.caption).
      done.

    end if.

    navtree[] = navitem.
  done.

This nav array is then passed verbatim through Smarty and out to the
templates. The advantage of this layout is that URLs can be cross
checked against the navtree array, and the appropriate nav
highlighted. The pseudocode to determine which index in the nav is
active is as follows:

  active_module = the <module> part of the URL as above.
  
  for i = 0 to count(navitem):
    if navitem[i].url is equal to the path of the URL:
      active_nav_index = i.
    end if.

    if navitem[i].subnav is set:
      for j = 0 to count(navitem[i].subnav):
        if navitem[i].subnav[j].url is equal to the path of the URL:
          active_subnav_index = j.
        end if.
      next j.
    end if.
  next i.

Then, to display in the template which nav is active, simply check the
indexes against the active_nav and active_subnav items. Of course,
this whole thing assumes that each URL is unique -- and quite frankly,
they _should_ be to follow RESTian principals, so that's how it's
going to be.


Modules
----------------------------------------------------------------------
    
Modules are installed in <basedir>/common/modules/<modulename>.

The rest of this section uses the blog module as an example.

Directory format:

  <basedir>/common/modules/blog:

     Blog.class.php    - The Blog class that handles the module's
                         internals.

     BlogNav.class.php - The navigation subclass that handles this
                         module's sub-navigation generation. Note
                         that this file does not necessarily _need_
                         to exist. If this file is missing, no subnav
                         entries will be available for it's toplevel
                         nav entry.

Each module class is subclassed from the SNB base class "Module" which
is located in <basedir>/common/classes/Module.class.php. This class
handles everything from parameter sanatizing to initialization. An
example for making a module is as follows:

  class Blog extends Module
  {
    function Blog()
    {
      $this->_initialize();
    }

    function handler()
    {
    }
  }

When Module::_initialize() is run, it parses out the object's parameters
into the $this->_params array in sanitized form.

More on writing modules will come forth later. =o)

Module::_initialize is responsible for:

  - Making sure that Dolphin exists and is connected
  - Parsing the URL into paramters and storing that into
    $this->_params.
  - Importing the Module's $_CONFIG['<modulename>'] vars into
    $this->_config.
  - Getting a reference to $_SMARTY and storing that into
    $this->_smarty.
  - Checking to see if the user is in admin mode and storing
    that in the boolean $this->_is_admin.

Modules should only acquire the database instance by calling
Singleton::getInstance("Dolphin")!


Configuration
----------------------------------------------------------------------

The Slash 'N Burn system provides a globally available, read-only
array for storing configuration information. This information is
available through the global $_CONFIG array. This array is a simple
single-depth heirarchy of keys. Referencing each key is as follows:

  global/username   is actually   $_CONFIG['global']['username']

Simple. The array may not go any further than two depths. Each module
should name it's keys according to the following guidelines:

  <modulename>/<variable>

Each module's variables will be automatically imported into it's
$this->_config array when the Module constructor, Module, is called.

The contents of $_CONFIG are pulled from the database that SNB is
currently connected to. Earlier variables to actually establish that
connection are available in <basedir>/common/include/config.php and
loaded first thing from the <basedir>/common/include/setup.php file.

Basic globals that are required for the functioning of the system:

  owner/email        - The email address of the owner of this SNB
                       system.
  owner/first_name   - The first name of the owner.
  owner/last_name    - The last name of the owner.
  admin/username     - The administrative username.
  admin/password     - The (plaintext) admin password.
  global/site_title  - The name of this website.
  global/site_slogan - The slogan (optional -- empty str if none).
  global/language    - The language (used in RSS feeds).
  global/theme       - The name of the theme to use.
  global/default_url - The default URI to load if none are given.
  global/base_url    - The base URL to use when constructing URLs: ie:
                       http://www.slashnburn.org


Installer
----------------------------------------------------------------------

The SNB installer is responsible for the following things:
  - Unpacking and installation of the SNB.phz archive.
  - Auto configuration of the .htaccess file if needed.
  - Initial setup for the database connection information stored in
    <basedir>/common/include/config.php.
  - Creation of the database if none exists.
  - Creation of the initial database tables if they do not already
    exist.
  - Collection of information relating to the base globals in the
    config database table.

More on the installer in later revisions of this document.


Administrative Side
----------------------------------------------------------------------

The administrative side is accessed by going to
http://www.slashnburn.org/admin. Pseudocode for the behavior of this
part of the system is as follows:

  did user log in?
    yes: set cookie
    no:  display login form

  is user logged in?
    yes:
      generate nav by calling <module>Nav->getAdminNav()
        Each link goes to a URL of the form:
        http://www.slashnburn.org/admin/<modulename>/<param1>/<param2>/...


Themes
----------------------------------------------------------------------

Themes are defined by CSS rules in a theme.css file. All graphics that
are associated with a theme are required to be in
<basedir>/themes/<themename>/.

The format for theme directories is as follows:

  <basedir>/themes/default/
                           theme.css - The theme file

The theme names used in the $_CONFIG to determine what theme to use is
based on the directory name of the theme. So if a theme installed in
<basedir>/themes/foobar1, then the $_CONFIG['global']['theme'] value
should be "foobar1".
                           

Administration Navigation
----------------------------------------------------------------------
The administration navigation is divided into the following major
parts:

        - Content Management
            Blog
              - Add New Entry
              - Edit Entry
              - Delete Entry
              - Manage Comments
            Custom Pages
              - Add Page
              - Edit Page
              - Delete Page
              - Manage Comments
            Navigation
            Manage Files
        - Configuration
            Blog
            Custom Pages
            Navigation
            Modules
            Theme
            Configuration Editor

        - Preview Current Page?
        - Help (popup to current page's help)
